---
const { songs } = Astro.props; // Array of songs passed from parent
let currentIndex = 0;

if (!songs || songs.length === 0) {
  throw new Error("No songs provided.");
}
---

<style>
  .audio-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
  }

  .play-pause {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 24px;
    color: #50c878;
    transition: color 0.3s ease;
    text-shadow:
      0 0 5px rgba(80, 200, 120, 0.7),
      0 0 10px rgba(80, 200, 120, 0.6);
  }

  .play-pause:hover {
    color: #34d399;
  }

  .progress-bar {
    position: relative;
    width: 200px;
    height: 5px;
    background-color: #1a1a1a;
    border-radius: 2.5px;
    box-shadow:
      0 0 15px rgba(80, 200, 120, 0.75),
      0 0 25px rgba(80, 200, 120, 0.6);
    margin-top: 10px;
    cursor: pointer;
  }

  .progress {
    background-color: #50c878;
    height: 100%;
    border-radius: 2.5px;
    width: 0%;
    transition: width 0.1s ease;
  }

  .progress-dot {
    position: absolute;
    top: -4px;
    left: 0;
    width: 12px;
    height: 12px;
    background-color: #50c878;
    border-radius: 50%;
    box-shadow: 0 0 10px rgba(80, 200, 120, 0.75);
    transform: translateX(-50%);
    cursor: pointer;
  }
</style>

<div class="audio-container pt-2">
  <!-- Song Title -->
  <h2 id="songTitle" class="neon-emerald pb-2">{songs.title}</h2>

  <!-- Progress bar -->
  <div class="progress-bar" id="progressBar">
    <div class="progress" id="progress"></div>
    <div class="progress-dot" id="progressDot"></div>
  </div>

  <div class="flex flex-row justify-between align-middle pt-5">
    <button class="play-pause px-2" id="prevBtn">⏮</button>
    <button class="play-pause px-2" id="playPauseBtn">▶️</button>
    <button class="play-pause px-2" id="nextBtn">⏭</button>
  </div>

  <!-- Audio element -->
  <audio id="audio" src={songs.src}></audio>
</div>

<script>
  const audio = document.getElementById("audio") as HTMLAudioElement;
  const playPauseBtn = document.getElementById("playPauseBtn");
  const progress = document.getElementById("progress");
  const progressDot = document.getElementById("progressDot");
  const progressBar = document.getElementById("progressBar");
  const songTitle = document.getElementById("songTitle");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");

  let isDragging = false;
  let currentIndex = 0;

  const songs = [
    {
      title: "Creative Technology Showreel",
      src: "/public/audio/Creative Technology Showreel.mp3",
    },
    { title: "Night Detective Music", src: "/public/audio/Night Detective Music.mp3" },
  ];

  // Function to load a song
  function loadSong(index) {
    audio.src = songs[index].src;
    songTitle.textContent = songs[index].title;
    audio.play();
    playPauseBtn.textContent = "⏸"; // Change to pause icon
  }

  // Play/Pause button functionality
  playPauseBtn.addEventListener("click", () => {
    if (audio.paused) {
      audio.play();
      playPauseBtn.textContent = "⏸";
    } else {
      audio.pause();
      playPauseBtn.textContent = "▶️";
    }
  });

  // Update progress bar and dot as the audio plays
  audio.addEventListener("timeupdate", () => {
    if (!isDragging) {
      const percentage = (audio.currentTime / audio.duration) * 100;
      updateProgress(percentage);
    }
  });

  function updateProgress(percentage) {
    progress.style.width = percentage + "%";
    progressDot.style.left = percentage + "%";
  }

  // Function to seek in the audio
  function seek(e) {
    const progressBarRect = progressBar.getBoundingClientRect();
    const offsetX = e.pageX - progressBarRect.left;
    const percentage = (offsetX / progressBarRect.width) * 100;
    audio.currentTime = (percentage / 100) * audio.duration;
    updateProgress(percentage);
  }

  // Dragging and seeking functionality
  progressBar.addEventListener("mousedown", (e) => {
    isDragging = true;
    seek(e);
  });

  document.addEventListener("mousemove", (e) => {
    if (isDragging) seek(e);
  });

  document.addEventListener("mouseup", () => {
    isDragging = false;
  });

  // Mobile touch support for seeking
  progressBar.addEventListener("touchstart", (e) => {
    isDragging = true;
    seek(e.touches[0]);
  });

  document.addEventListener("touchmove", (e) => {
    if (isDragging) seek(e.touches[0]);
  });

  document.addEventListener("touchend", () => {
    isDragging = false;
  });

  // Play next song when the current one ends
  audio.addEventListener("ended", () => {
    nextSong();
  });

  // Navigate to the next song
  function nextSong() {
    currentIndex = (currentIndex + 1) % songs.length; // Loop to the start
    loadSong(currentIndex);
  }

  // Navigate to the previous song
  function prevSong() {
    currentIndex = (currentIndex - 1 + songs.length) % songs.length; // Loop to the end
    loadSong(currentIndex);
  }

  // Next and previous buttons functionality
  nextBtn.addEventListener("click", nextSong);
  prevBtn.addEventListener("click", prevSong);
</script>
